apiVersion: apps/v1
kind: Deployment
metadata:
  name: metrics-generator
  namespace: test-metrics
  labels:
    app: metrics-generator
    version: v1.0.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app: metrics-generator
  template:
    metadata:
      labels:
        app: metrics-generator
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: test-metrics
        image: sohom83/test-metrics:latest
        imagePullPolicy: Always
        ports:
        - name: http-metrics
          containerPort: 8000
          protocol: TCP
        env:
        - name: PORT
          value: "8000"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /health
            port: http-metrics
          initialDelaySeconds: 10
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http-metrics
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      securityContext:
        fsGroup: 1000
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: metrics-generator
  namespace: test-metrics
  labels:
    app: metrics-generator
    monitoring: prometheus
spec:
  type: ClusterIP
  ports:
  - name: http-metrics
    port: 8000
    targetPort: http-metrics
    protocol: TCP
  selector:
    app: metrics-generator